name: PR Build and Test

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/**'
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/**'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npx tsc --noEmit
      
    - name: Build application
      run: npm run build
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
      
    - name: Run Playwright tests
      run: npm run test
      
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: frontend/dist/
        retention-days: 7

  docker-build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test Docker Compose builds
      run: |
        echo "Testing Docker Compose files..."
        
        # Test main docker-compose.yml
        if [ -f "docker-compose.yml" ]; then
          echo "Testing main docker-compose.yml"
          docker-compose config > /dev/null
        fi
        
        # Test RFC Docker examples
        for example_dir in docker-examples/*/; do
          if [ -f "${example_dir}docker-compose.yml" ]; then
            echo "Testing ${example_dir}docker-compose.yml"
            cd "$example_dir"
            docker-compose config > /dev/null
            cd - > /dev/null
          fi
        done
        
        echo "All Docker Compose files are valid!"
        
    - name: Test frontend Docker build
      run: |
        cd frontend
        if [ -f "Dockerfile.dev" ]; then
          echo "Testing frontend Docker build..."
          docker build -f Dockerfile.dev -t test-frontend .
          echo "Frontend Docker build successful!"
        fi

  security-scan:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level high
      
    - name: Check for vulnerable dependencies
      run: |
        # Run npm audit and capture output
        if ! npm audit --audit-level high --json > audit-results.json 2>/dev/null; then
          echo "Security vulnerabilities found!"
          cat audit-results.json
          exit 1
        else
          echo "No high-severity vulnerabilities found"
        fi

  build-status:
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-test, security-scan]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        echo "Build and test status: ${{ needs.build-and-test.result }}"
        echo "Docker build status: ${{ needs.docker-build-test.result }}"
        echo "Security scan status: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.build-and-test.result }}" != "success" || 
              "${{ needs.docker-build-test.result }}" != "success" || 
              "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "❌ One or more jobs failed"
          exit 1
        else
          echo "✅ All jobs completed successfully"
        fi